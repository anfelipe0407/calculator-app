{"version":3,"sources":["components/main/MainComponent.tsx","components/displayscreen/DisplayScreenComponent.tsx","components/buttons/button/ButtonComponent.tsx","components/buttons/ButtonsComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["reducer","state","action","type","operationResult","symbol","substring","length","initialState","MainComponent","useReducer","currentOperation","dispatch","useState","result","setResult","NUMBERS","OPERATIONS","useEffect","checkValidOperation","operationMap","mapOperation","eval","join","updateOperation","includes","splitOperation","split","canBeOperator","i","operationsMap","numberString","push","className","operation","onButtonPress","DisplayScreenComponent","ButtonComponent","buttonStyle","backgroundColor","style","onClick","ButtonsComponent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8bec8ac.chunk.js","sourcesContent":["import React, { useState, useReducer, Reducer } from 'react';\r\nimport './mainComponent.css';\r\n\r\nimport ButtonsComponent from '../buttons/ButtonsComponent';\r\nimport DisplayScreenComponent from '../displayscreen/DisplayScreenComponent';\r\nimport { useEffect } from 'react';\r\n\r\ntype Action = {\r\n   type: 'number' | 'operation' | 'erase' | 'clear' | 'calculate';\r\n   symbol?: string;\r\n};\r\n\r\ninterface InitialState {\r\n   operationResult: string;\r\n}\r\n\r\nconst reducer: Reducer<InitialState, Action> = (state, action) => {\r\n   switch (action.type) {\r\n      case 'number':\r\n         return { operationResult: state.operationResult + action.symbol };\r\n      case 'operation':\r\n         return { operationResult: state.operationResult + action.symbol };\r\n      case 'erase':\r\n         return {\r\n            operationResult: state.operationResult.substring(\r\n               0,\r\n               state.operationResult.length - 1\r\n            ),\r\n         };\r\n      case 'clear':\r\n         return { operationResult: '' };\r\n      case 'calculate':\r\n         return state;\r\n      default:\r\n         return state;\r\n   }\r\n};\r\n\r\nconst initialState: InitialState = {\r\n   operationResult: '',\r\n};\r\n\r\nconst MainComponent: React.FC = () => {\r\n   const [currentOperation, dispatch] = useReducer(reducer, initialState);\r\n   const [result, setResult] = useState(0);\r\n\r\n   const NUMBERS = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\r\n   const OPERATIONS = ['x', '-', '+', '/', '^'];\r\n\r\n   useEffect(() => {\r\n      if (currentOperation.operationResult === '') {\r\n         setResult(0);\r\n         return;\r\n      }\r\n\r\n      if (checkValidOperation()) {\r\n         const operationMap = mapOperation();\r\n         const result = eval(operationMap.join(' '));\r\n         setResult(result);\r\n      }\r\n   }, [currentOperation.operationResult]);\r\n\r\n   const updateOperation = (symbol: string): void => {\r\n      if (NUMBERS.includes(symbol)) {\r\n         dispatch({ type: 'number', symbol });\r\n         // console.log('numero');\r\n         return;\r\n      }\r\n\r\n      if (OPERATIONS.includes(symbol)) {\r\n         dispatch({ type: 'operation', symbol });\r\n         // console.log('operacion');\r\n         return;\r\n      }\r\n\r\n      if (symbol === 'del') {\r\n         dispatch({ type: 'erase' });\r\n         return;\r\n      }\r\n\r\n      if (symbol === '=') {\r\n         dispatch({ type: 'calculate' });\r\n         // console.log('calculate');\r\n         return;\r\n      }\r\n\r\n      if (symbol === 'C') {\r\n         dispatch({ type: 'clear' });\r\n         // console.log('clear');\r\n         return;\r\n      }\r\n   };\r\n\r\n   const checkValidOperation = (): boolean => {\r\n      const splitOperation = currentOperation.operationResult.split('');\r\n\r\n      let canBeOperator = false;\r\n      for (let i = 0; i < splitOperation.length; i++) {\r\n         if (OPERATIONS.includes(splitOperation[i])) {\r\n            if (!canBeOperator) return false;\r\n\r\n            canBeOperator = false;\r\n            continue;\r\n         }\r\n\r\n         if (NUMBERS.includes(splitOperation[i])) {\r\n            canBeOperator = true;\r\n            continue;\r\n         }\r\n      }\r\n\r\n      return true;\r\n   };\r\n\r\n   const mapOperation = (): Array<string> => {\r\n      const splitOperation = currentOperation.operationResult.split('');\r\n\r\n      const operationsMap = [];\r\n      let numberString = '';\r\n\r\n      for (let i = 0; i < splitOperation.length; i++) {\r\n         if (NUMBERS.includes(splitOperation[i])) {\r\n            numberString += splitOperation[i];\r\n\r\n            if (\r\n               splitOperation[i + 1] &&\r\n               OPERATIONS.includes(splitOperation[i + 1])\r\n            ) {\r\n               operationsMap.push(numberString);\r\n            }\r\n\r\n            if (!splitOperation[i + 1]) {\r\n               operationsMap.push(numberString);\r\n            }\r\n         }\r\n\r\n         if (OPERATIONS.includes(splitOperation[i])) {\r\n            if (!splitOperation[i + 1]) continue;\r\n\r\n            if (splitOperation[i] === 'x') {\r\n               operationsMap.push('*');\r\n               numberString = '';\r\n               continue;\r\n            }\r\n\r\n            if (splitOperation[i] === '^') {\r\n               operationsMap.push('**');\r\n               numberString = '';\r\n               continue;\r\n            }\r\n\r\n            operationsMap.push(splitOperation[i]);\r\n            numberString = '';\r\n         }\r\n      }\r\n\r\n      return operationsMap;\r\n   };\r\n\r\n   return (\r\n      <div className=\"main\">\r\n         <DisplayScreenComponent\r\n            operation={currentOperation.operationResult}\r\n            result={result}\r\n         />\r\n         <ButtonsComponent onButtonPress={updateOperation} />\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default MainComponent;\r\n","import React from 'react';\r\nimport './displayScreenComponent.css';\r\n\r\ninterface Props {\r\n   operation: string;\r\n   result: number;\r\n}\r\n\r\nconst DisplayScreenComponent: React.FC<Props> = ({ operation, result }) => {\r\n   return (\r\n      <div className=\"screenDiv\">\r\n         <small className=\"result-text\">{result}</small>\r\n         <p className=\"operation-text\">{operation}</p>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default DisplayScreenComponent;\r\n","import React from 'react';\r\nimport './buttonComponent.css';\r\n\r\ninterface Props {\r\n   symbol: string;\r\n   onButtonPress: (symbol: string) => void;\r\n}\r\n\r\nconst ButtonComponent: React.FC<Props> = ({ symbol, onButtonPress }) => {\r\n   const OPERATIONS = ['x', '-', '+', '/', '^'];\r\n\r\n   let buttonStyle = {\r\n      backgroundColor: '#d4d4d4',\r\n   };\r\n\r\n   if (OPERATIONS.includes(symbol)) {\r\n      buttonStyle.backgroundColor = '#fff672';\r\n   }\r\n\r\n   return (\r\n      <div\r\n         style={buttonStyle}\r\n         className=\"button\"\r\n         onClick={() => onButtonPress(symbol)}\r\n      >\r\n         <p>{symbol}</p>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default ButtonComponent;\r\n","import React from 'react';\r\nimport ButtonComponent from './button/ButtonComponent';\r\nimport './buttonsComponent.css';\r\n\r\ninterface Props {\r\n   onButtonPress: (symbol: string) => void;\r\n}\r\n\r\nconst ButtonsComponent: React.FC<Props> = ({ onButtonPress }) => {\r\n   return (\r\n      <div className=\"buttons-container\">\r\n         <ButtonComponent symbol=\"C\" onButtonPress={onButtonPress} />\r\n         <ButtonComponent symbol=\"del\" onButtonPress={onButtonPress} />\r\n         <ButtonComponent symbol=\"^\" onButtonPress={onButtonPress} />\r\n         <ButtonComponent symbol=\"/\" onButtonPress={onButtonPress} />\r\n         <ButtonComponent symbol=\"7\" onButtonPress={onButtonPress} />\r\n         <ButtonComponent symbol=\"8\" onButtonPress={onButtonPress} />\r\n         <ButtonComponent symbol=\"9\" onButtonPress={onButtonPress} />\r\n         <ButtonComponent symbol=\"x\" onButtonPress={onButtonPress} />\r\n         <ButtonComponent symbol=\"4\" onButtonPress={onButtonPress} />\r\n         <ButtonComponent symbol=\"5\" onButtonPress={onButtonPress} />\r\n         <ButtonComponent symbol=\"6\" onButtonPress={onButtonPress} />\r\n         <ButtonComponent symbol=\"-\" onButtonPress={onButtonPress} />\r\n         <ButtonComponent symbol=\"1\" onButtonPress={onButtonPress} />\r\n         <ButtonComponent symbol=\"2\" onButtonPress={onButtonPress} />\r\n         <ButtonComponent symbol=\"3\" onButtonPress={onButtonPress} />\r\n         <ButtonComponent symbol=\"+\" onButtonPress={onButtonPress} />\r\n         <ButtonComponent symbol=\"0\" onButtonPress={onButtonPress} />\r\n         <ButtonComponent symbol=\".\" onButtonPress={onButtonPress} />\r\n         {/* <ButtonComponent symbol=\"=\" onButtonPress={onButtonPress} /> */}\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default ButtonsComponent;\r\n","import React from 'react';\nimport './App.css';\nimport MainComponent from './components/main/MainComponent';\n\nfunction App() {\n   return (\n      <div className=\"App\">\n         <MainComponent />\n      </div>\n   );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}